// Generated by CoffeeScript 1.7.1

/*
@namespace $sf.host Defines the Publisher side api, and helper functions
@name $sf.host
@author <a href="mailto:ssnider@yahoo-inc.com">Sean Snider</a>
@author <a href="mailto:ccole[AT]emination.com">Chris Cole</a>
@version 1.0.2
 */


/*
@ignore
 */

(function() {
  var sf;

  sf = require('./boot');

  module.exports = function(allowNotTop) {
    if (allowNotTop == null) {
      allowNotTop = false;
    }
    return (function(window, sf) {
      var ATTACH, AUTO, AUTO_BOOT_MAX_RETRIES, BF_POS_MSG, CLIP, COLLAPSE_COMMAND, COMPARE_DOC_POS, COMPAT_MODE, CONTAINS, Config, DEFAULT_RENDER_TIMEOUT, DEFAULT_ZINDEX, DETACH, DOC, DOC_EL, EL_FROM_PT, ERROR_COMMAND, EXPAND_COMMAND, FLASH_MIME, GEOM_UPDATE_INTRVAL, GUID, HEIGHT, HIDDEN, IE_BORDER_ADJ, INTERSECT_FACTOR, LEN, M, MSG, NODE_TYPE, NOTIFY_COLLAPSE, NOTIFY_EXPAND, NOTIFY_FOCUS_CHANGE, NOTIFY_GEOM_UPDATE, OBJ, ONSCROLL, OVER, PMSG, POS_ID_AUTO_PREFIX, POS_MSG, POS_REL_BOX_ID_PREFIX, PX, ParamHash, PosConfig, PosMeta, Position, SCROLL, SF_DATATAG_CLASS, SF_POSELEM_WRAPPER_CLASS, ST, STR, SUPPORTS_FEATURES, TFXD, VERSION, WIDTH, XCOM_RESP_DELAY, attach_iframe_msging, bounds, canUseHTML5, complete_ifrs, config, contains, currentStyle, current_status, dc, detach_iframe_msging, docRect, dom, env, flashActiveXVersions, flash_ver, focus_update_timer, geckVer, geom_update_timer, get, html5Bound, ieVer, ifr_dest_id_map, iframes, inViewPercentage, initID, isIE, lang, lib, loc, locHost, mgr_bounds_details, msg_pipes, msghostfb, nuke, operaVer, overlaps, pending_ifrs, prep_iframe_msging, render, rendered_ifrs, scroll_parents_attached, send_msg_to_child_iframe, status, ua, usingHTML5, wbVer, win, winRect, win_events_attached, _attr, _build_geom, _calcBorders, _call_xmsg_host_fb, _callable, _cbool, _check_html5_init, _clear_focus_update_timer, _clear_geom_update_timer, _cnum, _collapse_safeframe, _cookieHash, _cookies_enabled_test, _create_pos_markup, _cstr, _doc, _docNode, _elt, _es, _expand_safeframe, _fire_pub_callback, _getClip, _getGeom, _getRectIE, _getRectNonIE, _get_doc_scroll, _get_flash_version, _guid, _handle_frame_load, _handle_msg_evt, _handle_msg_from_outside, _handle_node_scroll, _handle_render_timeout, _handle_unload, _handle_win_blur, _handle_win_focus, _handle_win_geom_resize, _handle_win_geom_scroll, _has_pending_renders, _ifr_view, _isPX, _max, _min, _mix, _noop, _par, _purge, _read_cookie, _ready, _record_error, _rect, _round, _send_generic_response, _send_response, _set_focus_update_timer, _set_geom_update_timer, _shim_frame, _strippedEncodedLocation, _tagName, _tags, _update_focus, _update_geom, _update_geom_win_resize, _update_geom_win_scroll, _view, _write_cookie;
      win = window;
      DEFAULT_RENDER_TIMEOUT = 60000;
      POS_ID_AUTO_PREFIX = "sf_pos";
      POS_REL_BOX_ID_PREFIX = "sf_pos_rel_el";
      SF_DATATAG_CLASS = "sf_data";
      SF_POSELEM_WRAPPER_CLASS = "sf_position";
      AUTO_BOOT_MAX_RETRIES = 100;
      GEOM_UPDATE_INTRVAL = 100;
      XCOM_RESP_DELAY = 1;
      IE_BORDER_ADJ = 2;
      INTERSECT_FACTOR = 10;
      BF_POS_MSG = "onBeforePosMsg";
      POS_MSG = "onPosMsg";
      SUPPORTS_FEATURES = {
        "exp-ovr": 1,
        "exp-push": 0,
        bg: 0,
        pin: 0,
        "read-cookie": 0,
        "write-cookie": 0
      };
      EXPAND_COMMAND = "exp-ovr";
      COLLAPSE_COMMAND = "collapse";
      ERROR_COMMAND = "error";
      NOTIFY_EXPAND = "expand";
      NOTIFY_GEOM_UPDATE = "geom-update";
      NOTIFY_COLLAPSE = COLLAPSE_COMMAND;
      NOTIFY_FOCUS_CHANGE = "focus-change";
      DEFAULT_ZINDEX = 3000;
      OBJ = "object";
      STR = "string";
      ST = "style";
      LEN = "length";
      WIDTH = "width";
      HEIGHT = "height";
      PX = "PX";
      CLIP = "clip";
      SCROLL = "scroll";
      ONSCROLL = "onscroll";
      COMPAT_MODE = "compatMode";
      DOC_EL = "documentElement";
      DOC = "document";
      NODE_TYPE = "nodeType";
      CONTAINS = "contains";
      COMPARE_DOC_POS = "compareDocumentPosition";
      EL_FROM_PT = "elementFromPoint";
      AUTO = "auto";
      HIDDEN = "hidden";
      OVER = "overflow";
      TFXD = "toFixed";
      ATTACH = "attach";
      DETACH = "detach";
      MSG = "message";
      PMSG = "postMessage";
      GUID = "guid";
      FLASH_MIME = "application/x-shockwave-flash";
      VERSION = sf.ver;
      env = sf.env;
      ua = env.ua;
      lib = sf.lib;
      lang = lib.lang;
      dom = lib.dom;
      iframes = dom.iframes;
      _cbool = lang.cbool;
      _cnum = lang.cnum;
      _cstr = lang.cstr;
      _callable = lang.callable;
      _noop = lang.noop;
      _guid = lang.guid;
      _mix = lang.mix;
      _elt = dom.elt;
      _par = dom.par;
      _tags = dom.tags;
      _attr = dom.attr;
      _doc = dom.doc;
      _tagName = dom.tagName;
      _view = dom.view;
      _ifr_view = iframes.view;
      _purge = dom.purge;
      _ready = dom.ready;
      _es = win && win.escape;
      M = win && win.Math;
      _max = M.max;
      _min = M.min;
      _round = M.round;
      _rect = null;
      ParamHash = lang && lang.ParamHash;
      dc = win && win[DOC];
      isIE = env && env.isIE;
      ieVer = (ua && ua.ie) || 0;
      wbVer = (ua && ua.webkit) || 0;
      geckVer = (ua && ua.gecko) || 0;
      operaVer = (ua && ua.opera) || 0;
      loc = win.location;
      locHost = loc && ((loc.protocol + "//" + (loc.host || loc.hostname)) || "");
      rendered_ifrs = {};
      msg_pipes = {};
      ifr_dest_id_map = {};
      pending_ifrs = {};
      complete_ifrs = {};
      scroll_parents_attached = {};
      mgr_bounds_details = false;
      canUseHTML5 = false;
      html5Bound = false;
      win_events_attached = false;
      geom_update_timer = 0;
      focus_update_timer = 0;
      current_status = null;
      msghostfb = null;
      flash_ver = null;
      config = null;
      flashActiveXVersions = ["ShockwaveFlash.ShockwaveFlash.11", "ShockwaveFlash.ShockwaveFlash.8", "ShockwaveFlash.ShockwaveFlash.7", "ShockwaveFlash.ShockwaveFlash.6", "ShockwaveFlash.ShockwaveFlash"];
      initID = void 0;

      /*
      Configure the base-level settings for the SafeFrames library
      Note that only one configuration can be active at a given time.
      Therefore you cannot change the configuration by creating a new $sf.host.Config while
      the SafeFrames library is busy (however you can add new position configurations).
      Instatiating a new config, when the library is not busy will destroy / remove all currently
      managed positions and there configurations.
      
      @name $sf.host.Config
      @constructor
      @public
      @param {Object} conf An object containing properties for configuration
      @param {Boolean} [conf.auto] Whether or not to have SafeFrames automatically boostrap an render any SafeFrames tags within the page
      @param {String} conf.cdn The protocol,host name, and port parts of a URI, that is a 2ndary origin, used with SafeFrames to render content. For example JS files would be loaded from conf.cdn+"/"+conf.root+"/"+conf.version+"/[filename]"
      @param {Boolean} [conf.debug] Whether or not debug mode is on or off
      @param {String} conf.root The root path part of the URI that is a 2ndary origin, used with SafeFrames to render content. For example the HTML file for rendering content into would beloaded from conf.cdn+"/"+conf.root+"/"+conf.version+"/"+conf.renderFile
      @param {String} conf.renderFile The filename (may also include path info), for which to render content into via a SafeFrame.
      @param {String} [conf.msgFile] The filename (may also include path info), for which to use as a proxy for x-domain messaging whenever HTML5 messaging is not available. Only required if supporting older browsers.
      @param {Number} [conf.to] The maximum amount of time in milliseconds to wait for a SafeFrame to finish rendering, defaults to 60 seconds.
      @param {Function} [conf.onBeforePosMsg] A callback function that gets fired before any cancellable action is requested to be peformed from a a SafeFrame, such as expansion, etc.  Return true out of this callback function to cancel/disallow the action in question.
      @param {Function} [conf.onPosMsg] A callback function that gets fired when an action requested by a SafeFrame is performed
      @param {Function} [conf.onStartPosRender] A callback function that gets fired when a SafeFrame starts to render 3rd party content.
      @param {Function} [conf.onEndPosRender] A callback function that gets fired when a SafeFrame finishes rendering 3rd party content.
      @param {Object} [conf.positions] A map of positions to automatically configure, where each key equals the id of the $sf.host.PosConfig object, and the value is an object containing said object's settings.
       */
      Config = function(conf) {
        var boot_up, conf_pos_map, me, posID, pos_conf, pos_id, pos_map;
        me = this;
        if (!arguments.length) {
          return (config ? _mix({}, config) : null);
        }
        if (!(me instanceof Config)) {
          return new Config(conf);
        }
        if (!conf) {
          config = null;
          return null;
        }
        boot_up = !!config;
        me.auto = ("auto" in conf ? _cbool(conf.auto) : true);
        me.cdn = _cstr(conf.cdn);
        me.debug = _cbool(conf.debug);
        me.root = _cstr(conf.root);
        me.renderFile = _cstr(conf.renderFile);
        me.msgFile = _cstr(conf.msgFile);
        me.to = _cnum(conf.to, DEFAULT_RENDER_TIMEOUT);
        me.ver = _cstr(conf.ver) || VERSION;
        me.onBeforePosMsg = (_callable(conf.onBeforePosMsg) ? conf.onBeforePosMsg : _noop);
        me.onPosMsg = (_callable(conf.onPosMsg) ? conf.onPosMsg : _noop);
        me.onStartPosRender = (_callable(conf.onStartPosRender) ? conf.onStartPosRender : _noop);
        me.onEndPosRender = (_callable(conf.onEndPosRender) ? conf.onEndPosRender : _noop);
        me.onFailure = (_callable(conf.onFailure) ? conf.onFailure : _noop);
        me.onAdLoad = (_callable(conf.onAdLoad) ? conf.onAdLoad : _noop);
        me.onReadCookie = (_callable(conf.onReadCookie) ? conf.onReadCookie : _noop);
        me.onWriteCookie = (_callable(conf.onWriteCookie) ? conf.onWriteCookie : _noop);
        conf_pos_map = conf.positions;
        me.positions = pos_map = {};
        if (conf_pos_map) {
          for (posID in conf_pos_map) {
            pos_conf = conf_pos_map[posID];
            if (pos_conf && typeof pos_conf === OBJ) {
              pos_id = posID || pos_conf.id || _guid(POS_ID_AUTO_PREFIX);
              pos_map[pos_id] = new PosConfig(pos_conf);
            }
          }
        }
        config = me;
        boot_up = !!(boot_up && me.auto && (sf.host.boot != null));
        try {
          if (boot_up) {
            sf.host.boot();
          }
        } catch (_error) {}
        return _mix({}, config);
      };

      /*
      Configure a particualar position for rendering a SafeFrame
      Each $sf.host.PosConfig object has an id property that should be unique.  Creating a new $sf.host.PosConfig with an id, that has already been
      used results in changing the old $sf.host.PosConfig settings, and can only be done if the SafeFrames library is not busy.
      Automatically ads to the position map of the $sf.host.Config object if said config has already been created.
      
      @name $sf.host.PosConfig
      @public
      @constructor
      @param {Object|String} posIDorObj The id of the $sf.host.PosConfig instance, or an object containing all settings that are to be used for the instance.
      @param {String} [posIDorObj.id] The id of the $sf.host.PosConfig instance, if not specified one will be generated automatically.
      @param {String} [posIDorObj.dest] The HTML element id attribute of the HTML element in the document where a SafeFrame will be rendered. Said element MUST exist within the page prior to a render.
      @param {String} [posIDorObj.bg] The color of the background to be used inside the SafeFrame. Default equals "transparent".
      @param {String} [posIDorObj.tgt] The name of the target window where hyperlinks inside a SafeFrame will navigate too...Note that "_self" is not allowed and always converted to "_top". Allowed values are any string value not prefixed with "_", or "_top" or "_blank".
      @param {String} [posIDorObj.css] A string of CSS rules, or a URL that points to a CSS style sheet to be used inside the SafeFrame
      @param {Number} [posIDorObj.w] The width of the SafeFrame, specified in pixels. Cannot be specified in em, % or another values.
      @param {Number} [posIDorObj.h] The height of the SafeFrame, specified in pixels. Cannot be specified in em, % or another values.
      @param {String} [posIDorObj.size] A string formated as "widthXheight", that defines the width and height of the SafeFrame. The delimiter character "X" is can be specified as lower or upper case.
      @param {String} [posIDorObj.z] The z-index of the SafeFrame.
      @param {Object} [posIDorObj.supports] An object containing key/value pairs for what features/actions are supported by the SafeFrame, and its corresponding value represents a boolean detereming whether that feature can be used.  Currently supported keys are "exp-ovr" == SafeFrame can expand in overlay mode, "exp-push" == SafeFrame can expand in push mode, and "bg" == SafeFrame can change the background of the publisher / host.
      @param {String} [destID] The HTML element id attribute of the HTML element in the document where a SafeFrame will be rendered. Said element MUST exist within the page prior to a render.
      @param {Object} [baseConf] An object representing a $sf.host.Config object to automatically use / create for the SafeFrames library. Note that baseConf can only be used one time, otherwise you have to use the $sf.host.Config object directly.
       */
      PosConfig = function(posIDorObj, destID, baseConf) {
        var me, sz, sz_split, typ, _ref;
        me = this;
        typ = (posIDorObj && typeof posIDorObj) || "";
        if (!(me instanceof PosConfig)) {
          return new PosConfig(posIDorObj, destID, baseConf);
        }
        if (typ === OBJ) {
          me.id = _cstr(posIDorObj.id);
          me.dest = _cstr(posIDorObj.dest || destID);
          me.bg = _cstr(posIDorObj.bg) || "transparent";
          me.tgt = _cstr(posIDorObj.tgt) || "_top";
          me.css = _cstr(posIDorObj.css);
          me.w = _cnum(posIDorObj.w, 0);
          me.h = _cnum(posIDorObj.h, 0);
          me.z = _cnum(posIDorObj.z, 0);
          me.view_id = (_ref = posIDorObj.view_elem) != null ? _ref.id : void 0;
          me.renderFile = _cstr(posIDorObj.renderFile) || null;
          me.supports = _mix({}, posIDorObj.supports || SUPPORTS_FEATURES, true, true, true);
          if (!me.w || !me.h) {
            sz = _cstr(posIDorObj.size);
            if (sz) {
              sz_split = sz.split(/x/g);
              me.w = _cnum(sz_split[0], 0);
              me.h = _cnum(sz_split[1], 0);
              me.size = sz;
            } else {
              me.size = "";
            }
          } else {
            me.size = me.w + "x" + me.h;
          }
        } else if (typ === "string") {
          me.id = _cstr(posIDorObj);
          me.dest = _cstr(destID);
        } else {
          me.dest = "";
          me.bg = "transparent";
          me.tgt = "_top";
          me.css = "";
          me.w = 0;
          me.h = 0;
          me.size = "";
          me.z = 0;
          me.supports = {};
        }
        me.id = me.id || _guid(POS_ID_AUTO_PREFIX);
        if (!config && baseConf) {
          Config(baseConf);
        }
        if (config) {
          config.positions[me.id] = me;
        }
        return _mix({}, me);
      };

      /*
      Construct a set of dynamic key/value pairs that can be shared as meta-data with the 3rd party content inside a SafeFrame.
      All data is treated as protected, and can only be specfied during construction of this object.
      
      @exports PosMeta as $sf.host.PosMeta#
      @public
      @constructor
      @class
      @param {Object} shared_object An object containing keys and values to be shared as meta-data inside the SafeFrame
      @param {String} [owner_key] A key name to be used to hold pseudo private keys / values of meta data.
      @param {Object} [owned_obj] An object containing psuedo private keys and values to be shared as meta-data inside the SafeFrame.
      @example
      var shared_data 		 = {content_id:8978098,partner_id:99},
      private_data_key	 = "rmx",
      private_data      = {section_id:2342,site_id:23904},
      meta_data		 = new $sf.host.PosMeta(shared_data, private_data_key, private_data);
      
      //show section id on host side
      alert(meta_data.value("rmx", "site_id")); //== 23904
      
      @example
      //now retrieve this information inside the safe frame
      
      var content_id = $sf.vend.meta("content_id"); //== 8978098
      
      var rmx_section_id = $sf.vend.meta("rmx", "section_id") //== 2342, but note that vendor side code must know the "owner_key" upfront.
       */
      PosMeta = function(shared_obj, owner_key, owned_obj) {

        /*
        A method retrieves a meta data value from this object.
        
        @exports get_value as $sf.host.PosMeta#value
        @param {String} propKey The name of the value to retrieve
        @param {String} [owner_key] The name of the owner key of the meta data value. By default, it is assumed to be shared, so nothing needs to be passed in unless looking for a specific proprietary value
        @return {String|Number|Boolean}
        @default {String} ""
        @public
        @function
         */
        var get_value, me, non_shared, old, posConf, serialize, set_value, shared;
        get_value = function(propKey, owner_key) {
          var ret;
          ret = "";
          if (!propKey || typeof propKey !== STR) {
            return ret;
          }
          if (!owner_key || typeof owner_key !== STR) {
            owner_key = "shared";
          }
          if (owner_key === "shared") {
            ret = shared[propKey] || "";
          } else {
            ret = (propKey in non_shared ? non_shared[prop_key] || "" : "");
          }
          return ret;
        };

        /*
        Return a serialized string representation (in url query string format) of the meta data object
        
        @exports serialize as $sf.host.PosMeta#toString
        @function
        @public
         */
        serialize = function() {
          var obj;
          obj = new ParamHash();
          obj.shared = shared;
          obj.non_shared = non_shared;
          return obj.toString();
        };
        set_value = function(propKey, ownerKey, value) {
          non_shared[ownerKey] || (non_shared[ownerKey] = {});
          return non_shared[ownerKey][propKey] = value;
        };
        me = this;
        shared = void 0;
        non_shared = void 0;
        old = void 0;
        posConf = void 0;
        if (!(me instanceof PosMeta)) {
          return new PosMeta(key, owned_obj, pos, shared_obj);
        }
        shared = {};
        non_shared = {};
        if (!owner_key || typeof owner_key !== STR) {
          return me;
        }
        if (shared_obj && typeof shared_obj === OBJ) {
          shared = _mix(shared, shared_obj);
        }
        if (owned_obj && typeof owned_obj === OBJ) {
          non_shared[owner_key] = owned_obj;
        }
        me.toString = serialize;
        me.value = get_value;
        me.setValue = set_value;
      };

      /*
      Create the HTML markup for a position if a src property was used
      
      @name $sf.host-_create_pos_markup
      @function
      @private
      @static
      @return {String}
       */
      _create_pos_markup = function(src) {
        var ckVal, fVer;
        if (src) {
          if (src.indexOf("${sf_ver}") > -1) {
            src = src.replace(/\${sf_ver}/g, $sf.ver);
          }
          if (src.indexOf("${ck_on}") > -1) {
            ckVal = (_cookies_enabled_test() ? "1" : "0");
            src = src.replace(/\${ck_on}/g, ckVal);
          }
          if (src.indexOf("${flash_ver}") > -1) {
            fVer = _get_flash_version();
            src = src.replace(/\${flash_ver}/g, fVer);
          }
        }
        return _cstr(["<scr", "ipt type='text/javascript', src='", src, "'></scr", "ipt>"]);
      };

      /*
      Get the falsh version number
       */
      _get_flash_version = function() {
        var err, getActiveXVersion, i, mimeTypes, obj, p, tmpVer;
        if (flash_ver !== null) {
          return flash_ver;
        }
        if (navigator.plugins && navigator.plugins.length > 0) {
          mimeTypes = navigator.mimeTypes;
          if (mimeTypes && mimeTypes[FLASH_MIME] && mimeTypes[FLASH_MIME].enabledPlugin && mimeTypes[FLASH_MIME].enabledPlugin.description) {
            flash_ver = mimeTypes[FLASH_MIME].enabledPlugin.version;
          }
        } else if (sf.env.isIE) {
          i = 0;
          while (i < flashActiveXVersions.length) {
            try {
              obj = new ActiveXObject(flashActiveXVersions[i]);
              tmpVer = obj.GetVariable("$version");
              p = tmpVer.indexOf(" ");
              if (p > -1) {
                flash_ver = tmpVer.substr(p + 1).replace(/,/g, ".");
              } else {
                flash_ver = tmpVer.replace(/,/g, ".");
              }
              break;
            } catch (_error) {
              err = _error;
              obj = null;
              flash_ver = 0;
              continue;
            }
            i++;
          }
        } else {
          flash_ver = 0;
        }
        return flash_ver;
        getActiveXVersion = function(activeXObj) {
          var version;
          version = -1;
          try {
            version = activeXObj.GetVariable("$version");
          } catch (_error) {}
          return version;
        };
      };

      /*
      Test to see if cookies are enabled
       */
      _cookies_enabled_test = function() {
        var cookieEnabled;
        cookieEnabled = (navigator.cookieEnabled ? true : false);
        if (typeof navigator.cookieEnabled === "undefined" && !cookieEnabled) {
          document.cookie = "testcookie";
          cookieEnabled = (document.cookie.indexOf("testcookie") !== -1 ? true : false);
          if (navigator) {
            navigator.cookieEnabled = cookieEnabled;
          }
        }
        return cookieEnabled;
      };

      /*
      Construction a postion content object that contains HTML, optionally meta-data, and optionally a position configuration to use.
      The id specified must match an id for a $sf.host.PosConfig (although said config could be specfied directly here via arguments).
      
      @name $sf.host.Position
      @constructor
      @public
      @param {Object|String} posIDorObj The id of the position which maps to its configuration, or an object represeting the various values of an $sf.host.Position instance.
      @param {String} [posIDorObj.id] The id of the position which maps to its configuration.
      @param {String} [posIDorObj.html] The HTML content to be rendered inside the SafeFrame. Note that HTML strings which have SCRIPT tags or other special characters may need to be properly escaped in order to avoid JavaScript syntax errors.
      @param {String} [posIDorObj.src] An optional URL to be used for redering inside the SafeFrame which will automatically generate a SCRIPT tag with the specified URL.
      @param {$sf.host.PosMeta} [posIDorObj.meta] An optional instance of the $sf.host.PosMeta object to be passed along into the SafeFrame
      @param {Object} [posIDorObj.conf] An optional representation of an $sf.host.PosConfig object to be used as the configuration for the SafeFrame position.
      @param {String} [html] The HTML content to be rendered inside the SafeFrame. Note that HTML strings which have SCRIPT tags or other special characters may need to be properly escaped in order to avoid JavaScript syntax errors.
      @param {$sf.host.PosMeta} [meta] An optional instance of the $sf.host.PosMeta object to be passed along into the SafeFrame
      @param {Object} [conf] An optional representation of an $sf.host.PosConfig object to be used as the configuration for the SafeFrame position.
       */
      Position = function(posIDorObj, html, meta, conf) {
        var id, me, msg, origHtml, typ;
        me = this;
        typ = posIDorObj && typeof posIDorObj;
        origHtml = html;
        if (!(me instanceof Position)) {
          return new Position(posIDorObj, html, meta, conf);
        }
        if (config == null) {
          msg = "Publisher Config not initialized - abort";
          sf.lib.logger.error(msg);
          sf.info.errs.push(msg);
          return;
        }
        if (typ === OBJ) {
          _mix(me, posIDorObj);
        } else {
          id = me.id = _cstr(posIDorObj) || _guid(POS_ID_AUTO_PREFIX);
        }
        if (!html) {
          if (me.src) {
            me.html = _create_pos_markup(me.src);
          } else {
            me.html = me.html || "";
            me.src = "";
          }
        } else {
          me.html = html;
          me.src = "";
        }
        if (!me.html) {
          me.html = "";
        }
        me.meta = meta || me.meta || {};
        me.conf = conf || me.conf || {};
        if (id) {
          if (config && config.positions[id]) {
            me.conf = config.positions[id];
          } else {
            if (conf) {
              conf.id = id;
              me.conf = new PosConfig(conf);
            }
          }
        }
      };

      /*
      @namespace $sf.lib.dom.msghost Contains functionality to reside in the top level page for sending and receiving x-domain messages to SafeFrame containers
      @name $sf.lib.dom.msghost
       */

      /*
      Returns the root document HTMLElement / node
      @name $sf.lib.dom-_docNode
      @private
      @static
      @function
      @param {HTMLElement} [el] An HTMLElement to use as a reference for finding the root document element.
      @returns {HTMLElement}
       */
      _docNode = function(el) {
        var compatMode, d, root;
        d = (el && _doc(el)) || dc;
        compatMode = d[COMPAT_MODE];
        root = d[DOC_EL];
        if (compatMode && !operaVer && compatMode !== "CSS1Compat") {
          root = d.body;
        }
        return root;
      };

      /*
      Returns whether or not a value is specified in pixels
      @name $sf.lib.dom-_isPX
      @private
      @static
      @function
      @param {String} val A css value of size
      @returns {Boolean}
       */
      _isPX = function(val) {
        val = _cstr(val);
        if (val && val.search(/\D+/g) === -1) {
          return true;
        }
        if (val && val.search(/px/g) !== -1) {
          return true;
        }
      };

      /*
      Return an array of values of clipping region information. Array represents top, right, bottom, left values respectively.
      If values are not specified in pixels, or no clip region is defined for that element, -1 is returned for each value.
      
      @name $sf.lib.dom-_getClip
      @private
      @function
      @static
      @param {HTMLStyleObject} curSt The current style object of an HTMLElement
      @return {Array}
       */
      _getClip = function(curSt) {
        var clipVal, idx, len, prop, props, ret, val;
        ret = [-1, -1, -1, -1];
        props = [CLIP + "Top", CLIP + "Right", CLIP + "Bottom", CLIP + "Left"];
        idx = 0;
        clipVal = void 0;
        prop = void 0;
        val = void 0;
        len = void 0;
        if (!curSt) {
          return ret;
        }
        if (ieVer) {
          while (prop = props[idx]) {
            clipVal = curSt[prop];
            if (_isPX(clipVal)) {
              clipVal = _cnum(clipVal, -1);
              if (clipVal >= 0) {
                ret[idx] = clipVal;
              }
            }
            idx++;
          }
        } else {
          clipVal = curSt[CLIP];
          if (clipVal && clipVal.search(/\d+/g) !== -1) {
            clipVal = clipVal.replace(/\w+\(([^\)]*?)\)/g, "$1");
            ret = clipVal.split(" ");
            ret = (ret[LEN] <= 1 ? ret.split(",") : ret);
            len = ret[LEN];
            idx = 0;
            while (len--) {
              val = ret[idx];
              if (!_isPX(val)) {
                ret[idx] = -1;
              } else {
                ret[idx] = _cnum(val, -1);
              }
              idx++;
            }
          }
        }
        return ret;
      };

      /*
      Returns border values in pixels if possible to help calculate geometry of an element
      
      @name $sf.lib.dom-_calcBorders
      @private
      @static
      @function
      @param {HTMLElement} el The HTMLElement for which to look at. . .
      @param {Object} rect The rect object generated for the HTMLElement in question to be adjusted
      @returns {Object} rect
       */
      _calcBorders = function(el, rect) {
        var l, re, st, t;
        t = 0;
        l = 0;
        st = void 0;
        re = /^t(?:able|d|h|r|head|foot)$/i;
        st = currentStyle(el);
        if (st) {
          t = st["borderTopWidth"];
          l = st["borderLeftWidth"];
          t = (_isPX(t) ? _cnum(t, 0) : 0);
          l = (_isPX(l) ? _cnum(l, 0) : 0);
          if (geckVer && re.test(_tagName(el))) {
            t = l = 0;
          }
        }
        rect = rect || {
          t: 0,
          l: 0
        };
        rect.t += t;
        rect.l += l;
        return rect;
      };

      /*
      Retrieve scroll values of a document
      
      @name $sf.lib.dom-_get_doc_scroll
      @private
      @static
      @function
      @param {HTMLElement} [el] An HTMLElement to use as a reference document rather than the default main document
      @return {Object} Contains x, y, w, h properties for scrolling
       */
      _get_doc_scroll = function(el) {
        var d, db, de, def, dv, offsetX, offsetY, pos;
        pos = {
          x: 0,
          y: 0,
          w: 0,
          h: 0
        };
        def = {
          scrollLeft: 0,
          scrollTop: 0,
          scrollWidth: 0,
          scrollHeight: 0
        };
        d = void 0;
        de = void 0;
        dv = void 0;
        db = void 0;
        offsetX = 0;
        offsetY = 0;
        d = _doc(el) || dc;
        de = d[DOC_EL] || def;
        db = d.body || def;
        dv = d.defaultView;
        if (dv) {
          offsetX = _cnum(dv.pageXOffset, 0);
          offsetY = _cnum(dv.pageYOffset, 0);
        }
        pos.x = _max(de.scrollLeft, db.scrollLeft, offsetX);
        pos.y = _max(de.scrollTop, db.scrollTop, offsetY);
        pos.w = _max(de.scrollWidth, db.scrollWidth, 0);
        pos.h = _max(de.scrollHeight, db.scrollHeight, 0);
        return pos;
      };

      /*
      Calculate a geometric rectangle for a given element. Note that for IE browsers
      we can use the "getBoundingClientRect" function which saves us some time / increases
      peformance. . however it really can only be called if the DOM is completely loaded,
      and if that is the case we fallback to the brute-force / non-IE method.
      
      @name $sf.lib.dom-_getRectIE
      @private
      @static
      @function
      @param {HTMLElement} el  The element for which to derive a rectangle object
      @returns {Object} An object representing the rectangle for the given HTMLElement
       */
      _getRectIE = function(el) {
        var adjustX, adjustY, bLeft, bTop, box, compatMode, d, de, e, rect, scroll, st, _back;
        rect = {
          t: 0,
          l: 0,
          r: 0,
          b: 0,
          w: 0,
          h: 0,
          z: 0
        };
        _back = "BackCompat";
        scroll = void 0;
        box = void 0;
        d = void 0;
        de = void 0;
        compatMode = void 0;
        st = void 0;
        adjustX = void 0;
        adjustY = void 0;
        bLeft = void 0;
        bTop = void 0;
        if (el && el[NODE_TYPE] === 1) {
          try {
            d = _doc(el) || dc;
            if (!dom.ready()) {
              return _getRectNonIE(el);
            }
            scroll = _get_doc_scroll(el);
            box = el.getBoundingClientRect();
            rect.t = box.top;
            rect.l = box.left;
            adjustX = adjustY = IE_BORDER_ADJ;
            compatMode = d[COMPAT_MODE];
            de = d[DOC_EL];
            st = currentStyle(de);
            bLeft = st["borderLeftWidth"];
            bTop = st["borderTopWidth"];
            if (ieVer === 6) {
              if (compatMode !== _back) {
                adjustX = adjustY = 0;
              }
            }
            if (compatMode === _back) {
              bLeft = (_isPX(bLeft) ? _cnum(bLeft, 0) : 0);
              adjustX = bLeft;
              bTop = (_isPX(bTop) ? _cnum(bTop, 0) : 0);
              adjustY = bTop;
              rect.t -= adjustX;
              rect.l -= adjustY;
            }
            rect.t += scroll.y;
            rect.l += scroll.x;
            rect.b = rect.t + el.offsetHeight;
            rect.r = rect.l + el.offsetWidth;
            rect.w = _max(rect.r - rect.l, 0);
            rect.h = _max(rect.b - rect.t, 0);
            rect.z = currentStyle(el, "zIndex");
          } catch (_error) {
            e = _error;
            rect = {
              t: 0,
              l: 0,
              r: 0,
              b: 0,
              w: 0,
              h: 0,
              z: 0
            };
          }
        }
        return rect;
      };

      /*
      Calculate a geometric rectangle for a given element. For non-IE browsers, we must use
      brute-force and walk up the offsetParent tree. Also takes in consideration for some
      other slight variations in browsers.
      
      @name $sf.lib.dom-_getRectNonIE
      @private
      @static
      @function
      @param {HTMLElement} el  The element for which to derive a rectangle object
      @returns {Object} An object representing the rectangle for the given HTMLElement
       */
      _getRectNonIE = function(el) {
        var bCheck, e, h, parentNode, rect, root, scroll, scrollLeft, scrollTop, w;
        rect = {
          t: 0,
          l: 0,
          r: 0,
          b: 0,
          w: 0,
          h: 0,
          z: 0
        };
        scrollTop = 0;
        scrollLeft = 0;
        bCheck = false;
        root = _docNode(el);
        scroll = _get_doc_scroll(el);
        parentNode = void 0;
        w = void 0;
        h = void 0;
        if (el && el[NODE_TYPE] === 1) {
          try {
            rect.l = el.offsetLeft || 0;
            rect.t = el.offsetTop || 0;
            parentNode = el;
            bCheck = geckVer || wbVer > 519;
            while (parentNode = parentNode.offsetParent) {
              rect.t += parentNode.offsetTop || 0;
              rect.l += parentNode.offsetLeft || 0;
              if (bCheck) {
                _calcBorders(parentNode, rect);
              }
              if (parentNode === root) {
                break;
              }
            }
            parentNode = el;
            if (currentStyle(parentNode, "position") !== "fixed") {
              parentNode = el;
              while (parentNode = _par(parentNode)) {
                if (parentNode[NODE_TYPE] === 1) {
                  scrollTop = parentNode.scrollTop || 0;
                  scrollLeft = parentNode.scrollLeft || 0;
                  if (geckVer && currentStyle(parentNode, OVER) !== "visible") {
                    _calcBorders(parentNode, rect);
                  }
                  rect.l -= scrollLeft;
                  rect.t -= scrollTop;
                }
                if (parentNode === root) {
                  break;
                }
              }
              rect.t += scroll.y;
              rect.l += scroll.x;
            } else {
              rect.t += scroll.y;
              rect.l += scroll.x;
            }
            if (!ieVer && el === _docNode(el)) {
              h = el.clientHeight;
              w = el.clientWidth;
            } else {
              h = el.offsetHeight;
              w = el.offsetWidth;
            }
            rect.b = rect.t + h;
            rect.r = rect.l + w;
            rect.w = _max(rect.r - rect.l, 0);
            rect.h = _max(rect.b - rect.t, 0);
            rect.z = currentStyle(el, "zIndex");
          } catch (_error) {
            e = _error;
            rect = {
              t: 0,
              l: 0,
              r: 0,
              b: 0,
              w: 0,
              h: 0,
              z: 0
            };
          }
        }
        return rect;
      };

      /*
      Returns an object that represents a rectangle with the geometric information of an HTMLDocument
      (includes scroll width / height)
      
      @name $sf.lib.dom.docRect
      @public
      @static
      @function
      @param {HTMLElement} [el] An HTMLElement to use as the reference for an HTMLDocument
      @returns {Object}
       */
      docRect = function(el) {
        var h, root, w;
        root = _docNode(el);
        w = 0;
        h = 0;
        if (root) {
          w = root.scrollWidth || 0;
          h = root.scrollHeight || 0;
        }
        return {
          t: 0,
          l: 0,
          b: h,
          r: w,
          w: w,
          h: h
        };
      };

      /*
      Returns an object that represents a rectangle with the geometric information of an HTMLWindow
      (does not include scroll width / height)
      
      @name $sf.lib.dom.winRect
      @public
      @static
      @function
      @param {HTMLElement} [el] An HTMLElement to use as the references for an HTMLWindow
      @returns {Object}
       */
      winRect = function(el) {
        var b, h, l, r, root, t, w, wi;
        wi = (el && _view(el)) || win;
        h = wi.innerHeight || 0;
        w = wi.innerWidth || 0;
        t = wi.screenY || wi.screenTop || 0;
        b = h + t;
        l = wi.screenX || wi.screenLeft || 0;
        r = w + l;
        root = _docNode(el);
        if (!h && !w && root) {
          h = root.clientHeight || 0;
          w = root.clientWidth || 0;
          r = l + w;
          b = t + h;
        }
        return {
          t: t,
          l: l,
          b: b,
          r: r,
          w: w,
          h: h
        };
      };

      /*
      Returns whether or not an HTMLElement is contained within another HTMLElement
      
      @name $sf.lib.dom.contains
      @public
      @static
      @function
      @param {HTMLElement} element The HTMLElement reference to search within
      @param {HTMLElement} needle The HTMLElement for which you want to check if its contained by the 1st parameter
      @returns {Boolean}
       */
      contains = function(element, needle) {
        var el_node_type, needle_node_type, ret;
        ret = false;
        el_node_type = (element && element[NODE_TYPE]) || -1;
        needle_node_type = (needle && needle[NODE_TYPE]) || -1;
        if (el_node_type === 1 && needle_node_type !== -1) {
          if (element[CONTAINS]) {
            if (operaVer || needle_node_type === 1) {
              ret = element[CONTAINS](needle);
            } else {
              while (needle) {
                if (element === needle) {
                  ret = true;
                  break;
                }
                needle = needle.parentNode;
              }
            }
          } else {
            if (element[COMPARE_DOC_POS]) {
              ret = element === needle || !!(element[COMPARE_DOC_POS](needle) & 16);
            }
          }
        }
        return ret;
      };

      /*
      Returns the current value of a style attribute, or the current style object in its entirety depending on whether an attribute parameter is specified
      
      @name $sf.lib.dom.currentStyle
      @public
      @static
      @function
      @param {HTMLElement} el The HTMLElement for which to retrieve style information
      @param {String} [attr] The style attribute (in JavaScript notation, e.g. 'backgroundColor' rather than 'background-color') to fetch.
      @return {HTMLStyleObject} An HTMLStyleObject containing all current style attribute values
      @return {String} The value of an style attribute (only if attr parameter is specified).
       */
      currentStyle = function(el, attr) {
        var comp, e, hasAttr, val;
        val = "";
        hasAttr = !!(arguments.length && attr);
        comp = "getComputedStyle";
        e = void 0;
        if (hasAttr) {
          if (ieVer) {
            try {
              val = el.currentStyle[attr];
            } catch (_error) {
              e = _error;
              val = "";
            }
          } else {
            try {
              val = _view(el)[comp](el, null)[attr];
            } catch (_error) {
              e = _error;
              val = "";
            }
          }
        } else {
          if (ieVer) {
            try {
              val = el.currentStyle;
            } catch (_error) {
              e = _error;
              val = null;
            }
          } else {
            try {
              val = _view(el)[comp](el, null);
            } catch (_error) {
              e = _error;
              val = null;
            }
          }
        }
        return val;
      };

      /*
      Calculate the surrounding boundaries of an HTMLElement, and whether or not the HTMLElement is "in-view" of the user
      
      @name $sf.lib.dom.bounds
      @public
      @static
      @function
      @param {HTMLElement} el The element for which to calculate information
      @param {Object} [details] An object reference used as an output parameter in which further details about the boundaries of the element are specified
      @param {Boolean} [check_3D] Check the element within 3 dimensional space such that any elements covering said element are also take into consideration
      @returns {Object} info An object containing information about the element boundaries
       */
      bounds = function(el, details, check_3D) {
        var b, client_height, client_width, clip, clip_rect, cur_st, doc_rect, el_rect, exp_rect, h, is_scroll_node, is_using_doc_root_b, is_using_doc_root_r, l, offset_height, offset_width, over_x_val, over_y_val, par, r, ref_node, root, root_rect, root_scroll, scroll_height, scroll_left, scroll_top, scroll_width, t, temp_rect, w, x_hidden, xsb_h, y_hidden, ysb_w;
        par = el && _par(el);
        root = _docNode(el);
        el_rect = _rect(el);
        root_rect = _rect(root);
        root_scroll = _get_doc_scroll(root);
        doc_rect = docRect(el);
        clip_rect = {
          t: 0,
          l: 0,
          r: 0,
          b: 0,
          w: 0,
          h: 0
        };
        exp_rect = {
          t: 0,
          l: 0,
          r: 0,
          b: 0,
          xs: 0,
          ys: 0,
          xiv: 0,
          yiv: 0,
          iv: 0,
          w: 0,
          h: 0
        };
        xsb_h = 0;
        ysb_w = 0;
        is_scroll_node = false;
        is_using_doc_root_r = false;
        is_using_doc_root_b = false;
        cur_st = void 0;
        w = void 0;
        h = void 0;
        t = void 0;
        l = void 0;
        r = void 0;
        b = void 0;
        scroll_width = void 0;
        offset_width = void 0;
        client_width = void 0;
        scroll_height = void 0;
        offset_height = void 0;
        client_height = void 0;
        over_x_val = void 0;
        scroll_left = void 0;
        scroll_top = void 0;
        over_y_val = void 0;
        clip = void 0;
        x_hidden = void 0;
        y_hidden = void 0;
        ref_node = void 0;
        temp_rect = void 0;
        is_scroll_node = false;
        details = (details && typeof details === OBJ ? details : {});
        if (par) {
          while (cur_st = currentStyle(par)) {
            if (cur_st["display"] === "block" || cur_st["position"] === "absolute" || cur_st["float"] !== "none" || cur_st["clear"] !== "none") {
              over_x_val = cur_st[OVER + "X"];
              over_y_val = cur_st[OVER + "Y"];
              clip = _getClip(cur_st);
              if (par === root) {
                scroll_width = root_scroll.w;
                scroll_height = root_scroll.h;
              } else {
                scroll_width = par.scrollWidth;
                scroll_height = par.scrollHeight;
              }
              offset_width = par.offsetWidth;
              offset_height = par.offsetHeight;
              client_width = par.clientWidth;
              client_height = par.clientHeight;
              if (over_x_val === HIDDEN || clip[1] > 0 || clip[3] > 0) {
                if (!ref_node) {
                  x_hidden = 1;
                  ref_node = par;
                }
              }
              if (over_y_val === HIDDEN || clip[0] > 0 || clip[2] > 0) {
                if (!ref_node) {
                  y_hidden = 1;
                  ref_node = par;
                }
              }
              if (over_x_val === SCROLL) {
                ref_node = par;
                xsb_h = offset_height - client_height;
                is_scroll_node = true;
              }
              if (over_y_val === SCROLL) {
                if (!ref_node) {
                  ref_node = par;
                }
                ysb_w = offset_width - client_width;
                is_scroll_node = true;
              }
              if (over_x_val === AUTO) {
                if (!ref_node) {
                  ref_node = par;
                }
                if (scroll_width > client_width) {
                  xsb_h = offset_height - client_height;
                }
                is_scroll_node = true;
              }
              if (over_y_val === AUTO) {
                if (!ref_node) {
                  ref_node = par;
                }
                if (scroll_height > client_height) {
                  ysb_w = offset_width - client_width;
                }
                is_scroll_node = true;
              }
              if (ref_node) {
                break;
              }
            }
            if (par === root) {
              if (scroll_width > client_width) {
                h = (win.innerHeight || 0) || offset_height;
                xsb_h = h - client_height;
              }
              if (scroll_height > client_height) {
                w = (win.innerWidth || 0) || offset_width;
                ysb_w = w - client_width;
              }
              is_scroll_node = true;
            }
            par = _par(par);
            if (!par || par[NODE_TYPE] !== 1) {
              break;
            }
          }
        }
        if (el_rect.w && el_rect.h) {
          if (!ref_node || ref_node === root) {
            exp_rect.t = _max(el_rect.t, 0);
            exp_rect.l = _max(el_rect.l, 0);
            if (ieVer && dc[COMPAT_MODE] === "BackCompat" && _attr(root, SCROLL) === "no") {
              y_hidden = x_hidden = 1;
            } else {
              cur_st = currentStyle(root);
              if (cur_st) {
                x_hidden = cur_st[OVER + "X"] === HIDDEN;
                y_hidden = cur_st[OVER + "Y"] === HIDDEN;
              }
            }
            if (root_scroll.h > root.clientHeight) {
              if (y_hidden) {
                exp_rect.b = 0;
              } else {
                is_using_doc_root_b = true;
                exp_rect.b = _max(((doc_rect.h - el_rect.h) - xsb_h) - el_rect.t, 0);
              }
            } else {
              exp_rect.b = _max(((root_rect.h - el_rect.h) - xsb_h) - el_rect.t, 0);
            }
            if (root_scroll.w > root.clientWidth) {
              if (x_hidden) {
                exp_rect.r = 0;
              } else {
                is_using_doc_root_r = true;
                exp_rect.r = _max(((doc_rect.w - el_rect.w) - ysb_w) - el_rect.l, 0);
              }
            } else {
              exp_rect.r = _max(((root_rect.r - el_rect.w) - ysb_w) - el_rect.l, 0);
            }
          } else {
            cur_st = currentStyle(ref_node);
            if (_tagName(ref_node) === "body") {
              ref_node = root;
              t = el_rect.t;
              l = el_rect.l;
            } else {
              t = l = 0;
            }
            clip_rect = _rect(ref_node);
            if (clip[1] > 0) {
              clip_rect.w = clip[1];
              clip_rect.r = clip_rect.l + clip_rect.w;
            }
            if (clip[3] > 0) {
              clip_rect.l = clip_rect.l + clip[3];
              clip_rect.w = clip_rect.w - clip[3];
            }
            if (clip[2] > 0) {
              clip_rect.h = clip[2];
              clip_rect.b = clip_rect.t + clip_rect.h;
            }
            if (clip[0] > 0) {
              clip_rect.t = clip_rect.t + clip[0];
              clip_rect.h = clip_rect.h - clip[0];
            }
            if (el_rect.t > clip_rect.t && clip_rect.t > 0) {
              t = el_rect.t - clip_rect.t;
            }
            if (el_rect.l > clip_rect.l && clip_rect.l > 0) {
              l = el_rect.l - clip_rect.l;
            }
            scroll_top = ref_node.scrollTop;
            scroll_left = ref_node.scrollLeft;
            scroll_height = ref_node.scrollHeight;
            scroll_width = ref_node.scrollWidth;
            exp_rect.t = _max(t, 0);
            exp_rect.l = _max(l, 0);
            if (cur_st) {
              x_hidden = cur_st[OVER + "X"] === HIDDEN || clip[1] > 0 || clip[3] > 0;
              y_hidden = cur_st[OVER + "Y"] === HIDDEN || clip[0] > 0 || clip[2] > 0;
            }
            if (el_rect.t >= clip_rect.b) {
              exp_rect.b = 0;
            } else {
              if (!y_hidden && el_rect.t >= clip_rect.b) {
                y_hidden = 1;
              }
              if (scroll_height > ref_node.clientHeight) {
                if (y_hidden) {
                  exp_rect.b = 0;
                } else {
                  exp_rect.b = _max(((scroll_height - el_rect.h) - xsb_h) - t, 0);
                }
              } else {
                exp_rect.b = _max(((clip_rect.h - el_rect.h) - xsb_h) - t, 0);
              }
            }
            if (el_rect.l >= clip_rect.r) {
              exp_rect.r = 0;
            } else {
              if (!x_hidden && el_rect.l >= clip_rect.r) {
                x_hidden = 1;
              }
              if (scroll_width > ref_node.clientWidth) {
                if (x_hidden) {
                  exp_rect.r = 0;
                } else {
                  exp_rect.r = _max(((scroll_width - el_rect.w) - ysb_w) - l, 0);
                }
              } else {
                exp_rect.r = _max(((clip_rect.w - el_rect.w) - ysb_w) - l, 0);
              }
            }
          }
          exp_rect.xs = (xsb_h ? 1 : 0);
          exp_rect.ys = (ysb_w ? 1 : 0);
          exp_rect.w = exp_rect.r + exp_rect.l;
          exp_rect.h = exp_rect.t + exp_rect.b;
          if (!ref_node || ref_node === root) {
            temp_rect = root_rect;
            ref_node = root;
          } else {
            temp_rect = clip_rect;
          }
          l = _max(el_rect.l, temp_rect.l);
          r = _min(el_rect.r, (is_using_doc_root_r ? _min(doc_rect.r, temp_rect.r) : temp_rect.r));
          w = _max(r - l, 0);
          t = _max(el_rect.t, temp_rect.t);
          b = _min(el_rect.b, (is_using_doc_root_b ? _min(doc_rect.b, temp_rect.b) : temp_rect.b));
          h = _max(b - t, 0);
          exp_rect.xiv = _cnum((w / el_rect.w)[TFXD](2));
          exp_rect.yiv = _cnum((h / el_rect.h)[TFXD](2));
          exp_rect.iv = _cnum(((w * h) / (el_rect.w * el_rect.h))[TFXD](2));
        }
        details.refNode = ref_node || root;
        details.isRoot = ref_node === root;
        details.canScroll = is_scroll_node;
        details.refRect = (!ref_node || ref_node === root ? root_rect : clip_rect);
        details.expRect = exp_rect;
        details.rect = el_rect;
        if (check_3D) {
          (function() {
            var arOvrlaps, el_area, el_h, el_w, idx, len, new_iv, new_xiv, new_yiv, ovr_area, ovr_node, ovr_node_rect;
            idx = 0;
            len = 0;
            arOvrlaps = void 0;
            el_w = void 0;
            el_h = void 0;
            el_area = void 0;
            ovr_node = void 0;
            ovr_node_rect = void 0;
            t = void 0;
            b = void 0;
            l = void 0;
            r = void 0;
            h = void 0;
            w = void 0;
            ovr_area = void 0;
            new_iv = void 0;
            new_xiv = void 0;
            new_yiv = void 0;
            if (exp_rect.iv > .5) {
              mgr_bounds_details = details;
              arOvrlaps = overlaps(el, _cnum(check_3D, 1, 1));
              mgr_bounds_details = null;
              len = arOvrlaps[LEN];
              el_w = el_rect.w;
              el_h = el_rect.h;
              el_area = el_w * el_h;
              if (len) {
                while (ovr_node = arOvrlaps[idx++]) {
                  ovr_node_rect = _rect(ovr_node);
                  l = _max(el_rect.l, ovr_node_rect.l);
                  r = _min(el_rect.r, ovr_node_rect.r);
                  t = _max(el_rect.t, ovr_node_rect.t);
                  b = _min(el_rect.b, ovr_node_rect.b);
                  w = r - l;
                  h = b - t;
                  ovr_area = w * h;
                  new_xiv = (1 - (w / el_w))[TFXD](2);
                  new_yiv = (1 - (h / el_h))[TFXD](2);
                  new_iv = (1 - (ovr_area / el_area))[TFXD](2);
                  if ((new_xiv > 0 && new_xiv < exp_rect.xiv) || (new_yiv > 0 && new_yiv < exp_rect.yiv)) {
                    exp_rect.xiv = new_xiv;
                    exp_rect.yiv = new_yiv;
                    exp_rect.iv = new_iv;
                  }
                }
              }
            }
          })();
        }
        return exp_rect;
      };

      /*
      Find any HTMLElements that are covering a given HTMLElement.
      
      @name $sf.lib.dom.overlaps
      @public
      @static
      @function
      @param {HTMLElement} el The HTMLElement for which to find any other elements that may be covering it.
      @param {Number} [limit] The maximum number of covering elements to return
      @returns {Array} An array of elements that are covering the given element
       */
      overlaps = function(el, limit) {
        var baseH, baseW, checkEl, curH, curW, doc, factor, h, id, idx, l, maxX, maxY, par_details, points, pt, rect, ref_par_node, ref_par_rect, ret, root, seen, t, w, x, y;
        rect = _rect(el);
        doc = _doc(el);
        root = _docNode(doc);
        t = rect.t;
        l = rect.l;
        w = rect.r - rect.l;
        h = rect.b - rect.t;
        factor = INTERSECT_FACTOR;
        ret = [];
        baseW = _round(w / factor);
        baseH = _round(h / factor);
        curW = baseW;
        curH = baseH;
        seen = {};
        par_details = {};
        points = [];
        idx = 0;
        x = void 0;
        y = void 0;
        pt = void 0;
        id = void 0;
        checkEl = void 0;
        ref_par_node = void 0;
        ref_par_rect = void 0;
        maxX = void 0;
        maxY = void 0;
        if (mgr_bounds_details) {
          par_details = mgr_bounds_details;
        } else {
          bounds(el, par_details, true);
        }
        ref_par_node = par_details.refNode;
        ref_par_rect = par_details.refRect;
        if (ref_par_rect && ref_par_node && ref_par_node !== root) {
          maxX = ref_par_rect.r;
          maxY = ref_par_rect.b;
        } else {
          maxX = l + w;
          maxY = t + h;
        }
        if (doc && root && doc[EL_FROM_PT]) {
          while (curW < w) {
            curH = baseH;
            while (curH < h) {
              x = l + curW;
              y = t + curH;
              if (x < maxX && y < maxY) {
                points.push([x, y]);
              }
              curH += baseH;
            }
            curW += baseW;
          }
          limit = _cnum(limit, points[LEN]);
          while (pt = points[idx++]) {
            checkEl = doc[EL_FROM_PT](pt[0], pt[1]);
            try {
              if (checkEl && checkEl.nodeType === 1 && checkEl !== root && checkEl !== el && !contains(el, checkEl)) {
                id = _attr(checkEl, "id");
                if (!id) {
                  id = lang.guid("geom_inter");
                  _attr(checkEl, "id", id);
                }
                if (!seen[id] && ret[LEN] < limit) {
                  seen[id] = 1;
                  ret.push(checkEl);
                }
              }
            } catch (_error) {}
          }
        }
        id = "";
        for (id in seen) {
          if (id.indexOf("geom_inter") === 0) {
            checkEl = _elt(id);
            if (checkEl) {
              _attr(checkEl, "id", null);
            }
          }
        }
        return ret;
      };

      /*
      A proxy wrapper for calling into the cross-domain messaging host fall back library
      Looks for namespace will be $sf.lib.dom.msghost_fb
      Said library is used in cases where there is not HTML5 style messaging (i.e. no postMessage method available).
      
      @name $sf.lib.dom.msghost-_call_xmsg_host_fb
      @private
      @static
      @function
      @param {String} methName The method name in the msg host library to call
      @param {*} arg1 An arbitrary argument to pass to said method as the 1st arg
      @param {*} arg2 An arbitrary argument to pass to said method as the 2nd arg
      @param {*} arg3 An arbitrary argument to pass to said method as the 3rd arg
      @returns {*} whatever comes back from the method
       */
      _call_xmsg_host_fb = function(methName, arg1, arg2, arg3) {
        if (!msghostfb) {
          msghostfb = dom.msghost_fb;
        }
        return methName && msghostfb && msghostfb[methName] && msghostfb[methName](arg1, arg2, arg3);
      };

      /*
      Listen for an initial HTML5 postMessage event, to validate that HTML5 style
      messaging can be used
      
      @name $sf.lib.dom.msghost-_check_html5_init
      @private
      @static
      @function
      @param {HTMLEvent} evt The raw HTML event object received from the postMessage call
       */
      _check_html5_init = function(evt) {
        if (!canUseHTML5 && evt && evt.data === initID) {
          canUseHTML5 = true;
          dom.evtCncl(evt);
          dom[DETACH](win, MSG, _check_html5_init);
        }
      };

      /*
      Listen for onmessage events in the main window. Validate that message is for us, and if so
      pass it through to the rest of the code and cancel further handling.
      
      @name $sf.lib.dom.msghost-_handle_msg_from_outside
      @private
      @static
      @function
      @param {HTMLEvent} evt The raw HTML event object received from the postMessage call
       */
      _handle_msg_from_outside = function(evt) {
        var cb, data, dataGUID, e, fr_win, ifr, msg_win, params, pipe, pipeGUID, ret, tgtID;
        data = evt && evt.data;
        msg_win = evt && evt.source;
        params = data && (data.indexOf(GUID) !== -1) && ParamHash(data);
        tgtID = params && params.id;
        ifr = tgtID && _elt(tgtID);
        fr_win = ifr && _ifr_view(ifr);
        pipe = tgtID && msg_pipes[tgtID];
        dataGUID = params && params.guid;
        pipeGUID = pipe && pipe.guid;
        cb = pipe && pipe._xmsgcb;
        ret = false;
        if (pipeGUID && dataGUID && dataGUID === pipeGUID && msg_win && fr_win && fr_win === msg_win) {
          try {
            ret = cb(params.msg);
          } catch (_error) {
            e = _error;
            ret = false;
          }
        }
        if (ret) {
          dom.evtCncl(evt);
        }
        return ret;
      };

      /*
      Send a message to a child iframe.
      
      @name $sf.lib.dom.msghost.send
      @public
      @static
      @function
      @param {String} tgtID The HTML id attribute of the iframe element for which to send a message
      @param {String} data The string of data to send to the given iframe
      @returns {Boolean} Whether or not message was send succesfully (note that this does not mean message was handled / recevied, only that sending was ok).
       */
      send_msg_to_child_iframe = function(tgtID, data) {
        var e, el, msgObj, pipe, success, w;
        pipe = tgtID && msg_pipes[tgtID];
        success = false;
        msgObj = void 0;
        w = void 0;
        el = void 0;
        e = void 0;
        if (!pipe) {
          success = _call_xmsg_host_fb("send", tgtID, data);
        } else {
          if (pipe) {
            msgObj = ParamHash();
            msgObj.msg = data;
            msgObj.guid = pipe.guid;
            if (usingHTML5()) {
              el = _elt(tgtID);
              w = _ifr_view(el);
              try {
                w[PMSG](_cstr(msgObj), pipe.srcHost || "*");
                success = true;
              } catch (_error) {
                e = _error;
                success = false;
              }
            } else {
              success = _call_xmsg_host_fb("send", tgtID, data);
            }
          }
        }
        msgObj = w = el = null;
        return success;
      };

      /*
      Get whether or not HTML5 style messaging can be used
      
      @name $sf.lib.dom.msghost.usingHTML5
      @public
      @static
      @function
      @returns {Boolean}
       */
      usingHTML5 = function() {
        return canUseHTML5;
      };

      /*
      Gets a location of the hosting page, stripped of the search hash,
      but leaving query parameters, port, host, path, etc.
       */
      _strippedEncodedLocation = function() {
        var cleaned, pos;
        cleaned = void 0;
        pos = loc.href.indexOf("#");
        if (pos > -1) {
          cleaned = loc.href.substr(0, pos);
        } else {
          cleaned = loc.href;
        }
        pos = cleaned.indexOf("?");
        if (pos > -1) {
          cleaned = cleaned.substr(0, pos);
        }
        return escape(cleaned);
      };

      /*
      Prepare an iframe in the top level window to be able to send / receive cross-domain messages
      Generally this method is called from $sf.lib.iframes.  The attrs object in question should
      represent key/value pairs of HTML attributes for the iframe. Note that the attrs object passed
      in will be modified with a new "name" property, to send information into the iframe and setup
      messaging.
      
      @name $sf.lib.dom.msghost.prep
      @public
      @static
      @function
      @param {Object} attrs Information required to set up the cross-domain messaging channel
      @param {String} attrs.id The IFRAME HTML id attribute
      @param {String} attrs.src The URL / src attribute of the IFRAME
      @param {String} [attrs.guid] The guid / signature to use to validate that messages sent/ received can be accepted. If not specified, one will be created automatically.
      @param {String} [attrs.name] The IFRAME HTML name attribute which will be used to send an intial message to the HTML document inside the IFRAME.
      @returns {Object} An object with various properties detailing the messaging pipe-line.
       */
      prep_iframe_msging = function(attrs) {
        var iframeName, locStripped, nameParams, newPipe, pipe, src, srcHost;
        pipe = null;
        iframeName = void 0;
        nameParams = void 0;
        src = void 0;
        srcHost = void 0;
        newPipe = void 0;
        locStripped = _strippedEncodedLocation();
        if (attrs) {
          iframeName = attrs.name;
          nameParams = ParamHash(iframeName);
          src = _cstr(attrs.src);
          srcHost = src && src.substring(0, src.indexOf("/", 9));
          srcHost = (srcHost.search(/http/g) !== 0 ? "" : srcHost);
          pipe = ParamHash(nameParams);
          pipe.id = attrs.id || ("iframe_" + _guid());
          pipe.src = src;
          pipe.srcHost = srcHost;
          pipe.guid = pipe.guid || _guid();
          pipe.host = locHost;
          pipe.loc = locStripped;
          pipe.proxyID = "";
          if (usingHTML5()) {
            pipe.html5 = 1;
            pipe.proxyPath = "";
          } else {
            newPipe = _call_xmsg_host_fb("prep", pipe);
            if (newPipe) {
              pipe = newPipe;
            }
          }
          attrs.name = pipe;
        }
        return pipe;
      };

      /*
      Listen for messages from an IFRAME. Note that on the host / publisher side
      this library only allows for one message handler to be attached to a given
      IFRAME.
      
      @name $sf.lib.dom.msghost.attach
      @public
      @static
      @function
      @param {HTMLElement} el The IFRAME reference to attach a listener callback too. .
      @param {Object} pipe The message pipe object created from $sf.lib.dom.msghost.prep
      @param {Function} cb The callback function to fire when a message is received
       */
      attach_iframe_msging = function(el, pipe, cb) {
        var tgtID;
        tgtID = void 0;
        if (_tagName(el) === "iframe") {
          tgtID = _attr(el, "id");
          if (tgtID && pipe && (pipe instanceof ParamHash) && tgtID === pipe.id) {
            if (usingHTML5()) {
              msg_pipes[tgtID] = pipe;
              pipe._xmsgcb = cb;
              if (!html5Bound) {
                dom[ATTACH](win, MSG, _handle_msg_from_outside);
                html5Bound = true;
              }
            } else {
              _call_xmsg_host_fb(ATTACH, el, pipe, cb);
            }
          }
        }
      };

      /*
      Detach listening for messages from an IFRAME
      
      @name $sf.lib.dom.msghost.detach
      @public
      @static
      @function
      @param {HTMLElement} el The IFRAME reference to detach a listener
       */
      detach_iframe_msging = function(el) {
        var empty, id, pipe, w;
        id = _attr(el, "id");
        pipe = id && msg_pipes[id];
        w = null;
        empty = true;
        if (!pipe) {
          _call_xmsg_host_fb(DETACH, el);
          return;
        }
        if (pipe) {
          pipe._xmsgcb = msg_pipes[id] = null;
          pipe = null;
          delete msg_pipes[id];
        }
        id = "";
        for (id in msg_pipes) {
          pipe = msg_pipes[id];
          if (pipe && pipe.guid) {
            empty = false;
            break;
          }
        }
        if (empty && usingHTML5() && html5Bound) {
          html5Bound = false;
          dom[DETACH](win, MSG, _handle_msg_from_outside);
        }
        el = w = pipe = null;
      };

      /*
      Fire the specifed callback out to the publisher. Note that other arguments beyond the 1st argument are passed throug to the callback.
      
      @name $sf.host-_fire_pub_callback
      @static
      @private
      @function
      @param {String} cb_name The callback name to fire
       */
      _fire_pub_callback = function(cb_name) {
        var a, args, cb_args, e, f, idx, len, ret;
        cb_args = [];
        args = arguments;
        len = args[LEN];
        idx = 0;
        f = void 0;
        ret = false;
        e = void 0;
        a = void 0;
        if (config) {
          f = config[cb_name];
          if (f) {
            while (len--) {
              a = args[idx++];
              if (a !== cb_name) {
                cb_args.push(a);
              }
            }
            try {
              ret = f.apply(null, cb_args);
            } catch (_error) {
              e = _error;
              ret = false;
            }
          }
        }
        return ret;
      };

      /*
      Nuke the position an report that said position took too long to render
      
      @name $sf.host-_handle_render_timeout
      @static
      @private
      @function
      @param {String} pos_id The position id that has taken too long
       */
      _handle_render_timeout = function(pos_id) {
        var pend;
        pend = pos_id && pending_ifrs[pos_id];
        if (pend) {
          clearTimeout(pend);
          nuke(pos_id);
          _fire_pub_callback(POS_MSG, "render-timeout", pos_id);
        }
        if (!_has_pending_renders()) {
          current_status = "";
        }
      };

      /*
      Clear the timer that fires every so often to update the geometry in side
      of SafeFrames
      
      @name $sf.host-_clear_geom_update_timer
      @static
      @private
      @function
       */
      _clear_geom_update_timer = function() {
        if (geom_update_timer) {
          clearTimeout(geom_update_timer);
          geom_update_timer = 0;
        }
      };

      /*
      +	 * Clear the timer that fires every so often to update the geometry in side
      +	 * of SafeFrames
      +	 *
      +	 * @name $sf.host-_clear_geom_update_timer
      +	 * @static
      +	 * @private
      +	 * @function
      +	 *
      +
       */
      _clear_focus_update_timer = function() {
        if (focus_update_timer) {
          clearTimeout(focus_update_timer);
          focus_update_timer = 0;
        }
      };
      _set_focus_update_timer = function(in_focus) {
        _clear_focus_update_timer();
        focus_update_timer = setTimeout(function() {
          _update_focus(in_focus);
        }, 2);
      };

      /*
      Set up the timer function that updates each SafeFrame with up to date geometric information
      
      @name $sf.host-_set_geom_update_timer
      @static
      @private
      @function
       */
      _set_geom_update_timer = function(is_win_scroll) {
        _clear_geom_update_timer();
        if (is_win_scroll) {
          geom_update_timer = setTimeout(_update_geom_win_scroll, GEOM_UPDATE_INTRVAL);
        } else {
          geom_update_timer = setTimeout(_update_geom_win_resize, GEOM_UPDATE_INTRVAL);
        }
      };

      /*
      Update all SafeFrames with updated geometric information
      
      @name $sf.host-_update_geom
      @static
      @private
      @function
      @param {Boolean} is_win_scroll Whether or not we are updating due to the main window being scrolled
       */
      _update_geom = function(is_win_scroll) {
        var g, id, ifr, msgObj, params, posID;
        posID = void 0;
        params = void 0;
        msgObj = void 0;
        id = void 0;
        ifr = void 0;
        g = void 0;
        for (posID in rendered_ifrs) {
          if (is_win_scroll && (posID in scroll_parents_attached)) {
            continue;
          }
          params = rendered_ifrs[posID];
          id = params && params.dest;
          ifr = id && _elt(id);
          if (ifr && params) {
            g = _getGeom(posID);
            msgObj = ParamHash();
            msgObj.pos = posID;
            msgObj.cmd = NOTIFY_GEOM_UPDATE;
            msgObj.geom = _es(g);
            _fire_pub_callback(POS_MSG, posID, NOTIFY_GEOM_UPDATE, g);
            _send_response(params, msgObj);
          }
        }
        _clear_geom_update_timer();
      };

      /*
      Update all SafeFrames with updated geometric information due to a window resize
      event.
      
      @name $sf.host-_update_geom_win_resize
      @static
      @private
      @function
       */
      _update_geom_win_resize = function() {
        _update_geom();
      };

      /*
      Update all SafeFrames with updated geometric information due to a window scroll event
      
      @name $sf.host-_update_geom_win_scroll
      @static
      @private
      @function
       */
      _update_geom_win_scroll = function() {
        _update_geom(true);
      };

      /*
      Update a SafeFrame that has new geometric information due to its parent HTML element
      scrolling.
      
      @name $sf.host-_handle_node_scroll
      @static
      @private
      @function
       */
      _handle_node_scroll = function(evt, posID, node) {
        var g, scr_handle;
        scr_handle = scroll_parents_attached[posID];
        g = void 0;
        if (scr_handle) {
          if (scr_handle.tID) {
            clearTimeout(scr_handle.tID);
            delete scr_handle.tID;
          }
          scr_handle.tID = setTimeout(function() {
            var id, ifr, msgObj, params;
            params = rendered_ifrs[posID];
            id = params && params.dest;
            ifr = id && _elt(id);
            g = void 0;
            msgObj = void 0;
            if (ifr && params) {
              g = _getGeom(posID, true);
              msgObj = ParamHash();
              msgObj.pos = posID;
              msgObj.cmd = NOTIFY_GEOM_UPDATE;
              msgObj.geom = _es(g);
              _fire_pub_callback(POS_MSG, posID, NOTIFY_GEOM_UPDATE, g);
              _send_response(params, msgObj);
            }
            delete scr_handle.tID;
          }, GEOM_UPDATE_INTRVAL);
        }
      };

      /*
      Handle the window onscroll event, eventually leading to a geometric update
      
      @name $sf.host-_handle_win_geom_scroll
      @static
      @private
      @function
      @param {HTMLEvent} evt The raw event object
       */
      _handle_win_geom_scroll = function(evt) {
        _set_geom_update_timer(1);
      };

      /*
      Handle the window onresize event, eventually leading to a geometric update
      once the window events are slowed down
      
      @name $sf.host-_handle_win_geom_resize
      @static
      @private
      @function
      @param {HTMLEvent} evt The raw event object
       */
      _handle_win_geom_resize = function(evt) {
        _set_geom_update_timer();
      };

      /*
      Update all SafeFrames with updated focus information
      
      @name $sf.host-_update_focus
      @static
      @private
      @function
      @param {Boolean} in_focus True when the window has gained focus
       */
      _update_focus = function(in_focus) {
        var data, id, ifr, msgObj, params, posID;
        posID = void 0;
        params = void 0;
        msgObj = void 0;
        id = void 0;
        ifr = void 0;
        for (posID in rendered_ifrs) {
          params = rendered_ifrs[posID];
          id = params && params.dest;
          ifr = id && _elt(id);
          if (ifr && params) {
            msgObj = ParamHash();
            data = ParamHash();
            msgObj.pos = posID;
            msgObj.cmd = data.cmd = NOTIFY_FOCUS_CHANGE;
            msgObj.value = in_focus;
            _fire_pub_callback(POS_MSG, posID, NOTIFY_FOCUS_CHANGE, in_focus);
            _send_response(params, msgObj);
          }
        }
        _clear_focus_update_timer();
      };

      /*
      Handle the window focus event, which notifies ads of the change
       */
      _handle_win_focus = function(evt) {
        _set_focus_update_timer(true);
      };

      /*
      Handle the window blur event, which notifies ads of the change
       */
      _handle_win_blur = function(evt) {
        _set_focus_update_timer(false);
      };

      /*
      Handle the window unload event, clearing up our state
      
      @name $sf.host-_handle_unload
      @static
      @private
      @function
      @param {HTMLEvent} evt The raw event object
       */
      _handle_unload = function(evt) {
        var e, prop, scr_handle;
        prop = void 0;
        scr_handle = void 0;
        e = void 0;
        _clear_geom_update_timer();
        try {
          dom.detach(win, SCROLL, _handle_win_geom_scroll);
          dom.detach(win, "resize", _handle_win_geom_resize);
          dom.detach(win, "unload", _handle_unload);
          dom.detach(win, "focus", _handle_win_focus);
          dom.detach(win, "blur", _handle_win_blur);
          for (prop in scroll_parents_attached) {
            scr_handle = scroll_parents_attached[prop];
            if (scr_handle) {
              if (scr_handle.tID) {
                clearTimeout(scr_handle.tID);
              }
              dom.detach(scroll_parents_attached[prop], SCROLL, scr_handle[ONSCROLL]);
              scr_handle[ONSCROLL] = scr_handle.node = null;
            }
            scroll_parents_attached[prop] = null;
            delete scroll_parents_attached[prop];
          }
          win_events_attached = false;
        } catch (_error) {}
      };

      /*
      Handle the window message event, passed from raw event handling of the msghost code.
      Pass through the data to our format handling functions for expand, etc.
      
      @name $sf.host-_handle_msg_evt
      @static
      @private
      @function
      @param {String|Object} data the message to be handled
      @return {Boolean} return whether or not the message was handled
       */
      _handle_msg_evt = function(data) {
        var canRead, canWrite, info, msgObj, ret;
        msgObj = void 0;
        ret = false;
        info = void 0;
        msgObj = ParamHash(data, null, null, true, true);
        if (msgObj && msgObj.pos) {
          info = rendered_ifrs[msgObj.pos];
          if (info) {
            ret = (function() {
              switch (msgObj.cmd) {
                case "exp-push":
                  _expand_safeframe(msgObj, true);
                  return true;
                case "exp-ovr":
                  _expand_safeframe(msgObj);
                  return true;
                case "collapse":
                  _collapse_safeframe(msgObj);
                  return true;
                case "msg":
                case "clicked":
                case "viewed":
                case "requested":
                case "unviewed":
                case "reload":
                  _fire_pub_callback(POS_MSG, msgObj.pos, msgObj.cmd, msgObj.msg);
                  _send_generic_response(msgObj.pos, msgObj.cmd);
                  return true;
                case "loaded":
                  _fire_pub_callback("onAdLoad", msgObj.pos, msgObj);
                  _send_generic_response(msgObj.pos, msgObj.cmd);
                  return true;
                case ERROR_COMMAND:
                  _record_error(msgObj);
                  return true;
                case NOTIFY_GEOM_UPDATE:
                  sf.lib.logger.log("Geom update complete: " + msgObj.pos);
                  return true;
                case "read-cookie":
                  canRead = info.conf && info.conf.supports && info.conf.supports[msgObj.cmd] && info.conf.supports[msgObj.cmd] !== "0";
                  if (canRead) {
                    _read_cookie(msgObj);
                    _fire_pub_callback("onCookieRead", msgObj.pos, msgObj.cookie);
                    return true;
                  } else {
                    return false;
                  }
                  break;
                case "write-cookie":
                  canWrite = info.conf && info.conf.supports && info.conf.supports[msgObj.cmd] && info.conf.supports[msgObj.cmd] !== "0";
                  if (canWrite) {
                    _write_cookie(msgObj);
                    _fire_pub_callback("onCookieWrite", msgObj.pos, msgObj.cookie);
                    return true;
                  } else {
                    return false;
                  }
              }
            })();
          }
        }
        return ret;
      };

      /*
      Check whether or not there are any SafeFrames being rendered
      
      @name $sf.host-_has_pending_renders
      @static
      @private
      @function
       */
      _has_pending_renders = function() {
        var all_renders_done, pos_id;
        all_renders_done = true;
        pos_id = void 0;
        for (pos_id in pending_ifrs) {
          all_renders_done = false;
          break;
        }
        return all_renders_done;
      };

      /*
      Send a response back down to the SafeFrame after a message was handled
      
      @name $sf.host-_send_response
      @private
      @static
      @function
      @param {$sf.lib.lang.ParamHash} params The parameters object stored for a rendered SafeFrame holding state information
      @param {$sf.lib.lang.ParamHash} msgObj The message to send back down into the SafeFrame
       */
      _send_response = function(params, msgObj) {

        /*
        @ignore
         */
        current_status = "sending-msg-down-" + msgObj.cmd;
        setTimeout((function() {
          var id;
          id = params && params.dest;
          if (id && msgObj) {
            send_msg_to_child_iframe(id, msgObj.toString());
          }
          current_status = "";
          msgObj = id = params = null;
        }), XCOM_RESP_DELAY);
      };

      /*
      Handle the onload event from the IFRAME tag created for a SafeFrame.
      Note that b/c we used our own library to create the IFRAME ($sf.lib.dom.iframes),
      the "this" keyword will now properly point to the IFRAME in question.
      
      @name $sf.host-_handle_frame_load
      @private
      @static
      @function
       */
      _handle_frame_load = function() {
        var all_renders_done, el, pos_id;
        el = this;
        pos_id = dom.attr(el, "_pos_id");
        all_renders_done = true;
        if (pending_ifrs[pos_id]) {
          clearTimeout(pending_ifrs[pos_id]);
          delete pending_ifrs[pos_id];
          complete_ifrs[pos_id] = pos_id;
          dom.attr(el, "_pos_id", null);
          dom.attr(el, "name", null);
          el[ST].visibility = "inherit";
          el[ST].display = "block";
          _fire_pub_callback("onEndPosRender", pos_id);
        }
        if (!_has_pending_renders()) {
          current_status = "";
        }
      };

      /*
      Build an extra IFRAME to put behind any iframe that is expanding, to protect
      against painting issues in IE with window'd mode flash.
      
      @name $sf.host-_shim_frame
      @private
      @static
      @function
       */
      _shim_frame = function(id, showIt, w, h, z) {
        var ifr, shmFrm, shmID;
        if (!isIE) {
          return;
        }
        ifr = _elt(id);
        shmID = "shm_" + id;
        shmFrm = _elt(shmID);
        if (showIt) {
          if (shmFrm) {
            shmFrm[ST].visibility = "visible";
            return;
          }
          shmFrm = iframes.clone(ifr, {
            id: shmID,
            src: "",
            name: shmID
          }, [WIDTH, ":", w, PX, ";position:absolute;", HEIGHT, ":", h, PX, ";z-index:", z - 1, ";filter:progid:DXImageTransform.Microsoft.Alpha(opacity=0)"]);
          dom.append(_par(ifr), shmFrm);
        } else {
          if (!showIt && shmFrm) {
            shmFrm[ST].visibility = "hidden";
          }
        }
      };

      /*
      Build a geometry info object for a particular SafeFrame position, and also
      may attach an onscroll event listener to a parent HTML element if said parent element
      is scrollable but not the root document node / body
      
      @name $sf.host-_build_geom
      @private
      @static
      @function
      @return {Object} With information about the geometry around a given SafeFrame
       */
      _build_geom = function(posID, dest, dont_attach_scroll_evt) {
        var details, e, ex, info, new_ref_node, node, s, scr_handle;
        bounds = void 0;
        info = ParamHash();
        details = {};
        scr_handle = void 0;
        node = void 0;
        new_ref_node = void 0;
        ex = void 0;
        s = void 0;
        e = void 0;
        try {
          bounds = dom.bounds(dest, details, true);
          if (!dont_attach_scroll_evt && !details.isRoot && details.canScroll) {
            ex = details.expRect;
            if (ex.xs || ex.ys) {
              scr_handle = scroll_parents_attached[posID];
              new_ref_node = details.refNode;
              if (scr_handle && scr_handle.node !== new_ref_node) {
                if (scr_handle.tID) {
                  clearTimeout(scr_handle.tID);
                }
                dom.detach(node, SCROLL, scr_handle[ONSCROLL]);
                scr_handle.node = scr_handle[ONSCROLL] = null;
                scroll_parents_attached[posID] = null;
                delete scroll_parents_attached[posID];
              }
              if (!scroll_parents_attached[posID]) {
                scr_handle = {};
                scr_handle.node = new_ref_node;

                /*
                @ignore
                 */
                scr_handle[ONSCROLL] = function(evt) {
                  _handle_node_scroll(evt, posID);
                };
                scroll_parents_attached[posID] = scr_handle;
                dom.attach(new_ref_node, SCROLL, scr_handle[ONSCROLL]);
              }
            }
          }
        } catch (_error) {
          e = _error;
          info = null;
        }
        try {
          if (info) {
            info.win = ParamHash(dom.winRect());
            info.par = ParamHash(details.refRect);
            ex = ParamHash(details.expRect);
            s = ParamHash(details.rect);
            s.iv = ex.iv;
            s.xiv = ex.xiv;
            s.yiv = ex.yiv;
            delete ex.iv;
            delete ex.xiv;
            delete ex.yiv;
            info.exp = ex;
            info.self = s;
          }
        } catch (_error) {
          e = _error;
          info = null;
        }
        return info;
      };

      /*
      Expands a given SafeFrame based on a command from the 3rd party content
      
      @name $sf.host-_expand_safeframe
      @private
      @static
      @function
      @param {$sf.lib.lang.ParamHash} msgObj Details about how to do the expansion
      
      TODO, handle omni-directional and push
       */
      _expand_safeframe = function(msgObj, push) {
        var b, delta, dx, dy, exp, id, ifr, ifrSt, l, nHt, nWd, orHt, orWd, par, parSt, params, params_conf, posID, r, scr_handle, t, xn, yn, z;
        xn = false;
        yn = false;
        posID = msgObj && msgObj.pos;
        params = void 0;
        params_conf = void 0;
        ifr = void 0;
        par = void 0;
        ifrSt = void 0;
        parSt = void 0;
        orWd = void 0;
        orHt = void 0;
        dx = void 0;
        dy = void 0;
        nWd = void 0;
        nHt = void 0;
        id = void 0;
        t = void 0;
        l = void 0;
        r = void 0;
        b = void 0;
        exp = void 0;
        z = void 0;
        delta = void 0;
        scr_handle = void 0;
        if (!posID) {
          return;
        }
        params = rendered_ifrs[posID];
        params_conf = params && params.conf;
        if (!params || !params_conf) {
          return;
        }
        id = params.dest;
        ifr = _elt(id);
        par = _elt(POS_REL_BOX_ID_PREFIX + "_" + posID);
        if (!ifr || !par) {
          return;
        }
        ifrSt = ifr[ST];
        parSt = par[ST];
        if (!ifrSt) {
          return;
        }
        scr_handle = scroll_parents_attached[posID];
        if (scr_handle && scr_handle.tID) {
          clearTimeout(scr_handle.tID);
        }
        _clear_geom_update_timer();
        exp = msgObj.exp_obj;
        orWd = params_conf.w;
        orHt = params_conf.h;
        if (!exp) {
          dx = params.dx = _cnum(msgObj.dx);
          dy = params.dy = _cnum(msgObj.dy);
          xn = dx < 0;
          yn = dy < 0;
          nWd = (xn ? orWd + (dx * -1) : orWd + dx);
          nHt = (yn ? orHt + (dy * -1) : orHt + dy);
        } else {
          t = _cnum(exp.t, 0, 0);
          l = _cnum(exp.l, 0, 0);
          r = _cnum(exp.r, 0, 0);
          b = _cnum(exp.b, 0, 0);
          nWd = _cnum(orWd + l + r, 0, 0);
          nHt = _cnum(orHt + t + b, 0, 0);
          if (t) {
            dy = t * -1;
            yn = true;
          } else {
            dy = 0;
          }
          if (l) {
            dx = l * -1;
            xn = true;
          } else {
            dx = 0;
          }
        }
        if (nWd <= orWd && nHt <= orHt) {
          return;
        }
        if (_fire_pub_callback(BF_POS_MSG, posID, EXPAND_COMMAND, dx, dy)) {
          return;
        }
        ifrSt[WIDTH] = nWd + PX;
        ifrSt[HEIGHT] = nHt + PX;
        if (xn) {
          ifrSt.left = dx + PX;
        }
        if (yn) {
          ifrSt.top = dy + PX;
        }
        z = _cnum(params.z, 0);
        if (!z) {
          z = DEFAULT_ZINDEX;
        }
        ifrSt.zIndex = z;
        _shim_frame(id, true, nWd, nHt, z - 1);
        if (push) {
          parSt[WIDTH] = nWd + PX;
          parSt[HEIGHT] = nHt + PX;
        } else {
          parSt[WIDTH] = orWd + PX;
          parSt[HEIGHT] = orHt + PX;
        }
        params.expanded = true;
        msgObj.dx = dx;
        msgObj.dy = dy;
        msgObj.w = nWd;
        msgObj.h = nHt;
        msgObj.cmd = "expand";
        msgObj.geom = _es(_getGeom(posID, true));
        _fire_pub_callback(POS_MSG, posID, EXPAND_COMMAND, dx, dy);
        _send_response(params, msgObj);
        ifrSt = par = ifr = params = msgObj = null;
      };

      /*
      Collapse a SafeFrame after it has been expanded
      
      @name $sf.host-_collapse_safeframe
      @private
      @static
      @function
      @param {$sf.lib.lang.ParamHash} msgObj The details about the message send from the SafeFrame to collapse
      @param {Boolean} [isOutside] Whether or not the collapse command came from the publisher
      @param {Boolean} [noMsging] Whether or not to send a message of response back to the SafeFrame being collapsed
       */
      _collapse_safeframe = function(msgObj, isOutside, noMsging) {
        var id, ifr, ifrSt, par, parSt, params, params_conf, posID, scr_handle;
        posID = msgObj && msgObj.pos;
        params = posID && rendered_ifrs[posID];
        params_conf = params && params.conf;
        id = params_conf && params_conf.dest;
        ifr = id && _elt(id);
        par = ifr && _elt(POS_REL_BOX_ID_PREFIX + "_" + posID);
        ifrSt = ifr && ifr[ST];
        parSt = par && par[ST];
        scr_handle = void 0;
        if (!posID || !params || !ifr || !par) {
          return;
        }
        if (!params.expanded) {
          return;
        }
        scr_handle = scroll_parents_attached[posID];
        if (scr_handle && scr_handle.tID) {
          clearTimeout(scr_handle.tID);
        }
        _clear_geom_update_timer();
        if (!noMsging) {
          if (_fire_pub_callback(BF_POS_MSG, posID, COLLAPSE_COMMAND, 0, 0)) {
            return;
          }
        }
        ifrSt.left = ifrSt.top = "0px";
        parSt[WIDTH] = ifrSt[WIDTH] = params_conf.w + PX;
        parSt[HEIGHT] = ifrSt[HEIGHT] = params_conf.h + PX;
        ifrSt.zIndex = params.dx = params.dy = 0;
        _shim_frame(id);
        if (!noMsging) {
          _fire_pub_callback(POS_MSG, posID, COLLAPSE_COMMAND, 0, 0);
          msgObj.cmd = (isOutside ? "collapsed" : "collapse");
          msgObj.geom = _es(_getGeom(posID, true));
          _send_response(params, msgObj);
        }
        ifr = ifrSt = par = parSt = params = msgObj = null;
      };

      /*
      Records a reported error message to $sf.info.errors and fires any listeners
      
      @name $sf.host-_record_error
      @private
      @static
      @function
      @param {$sf.lib.lang.ParamHash} msgObj The details about the message send from the SafeFrame having an error
       */
      _record_error = function(msgObj) {
        var id, ifr, ifrSt, par, parSt, params, params_conf, posID, scr_handle;
        posID = msgObj && msgObj.pos;
        params = posID && rendered_ifrs[posID];
        params_conf = params && params.conf;
        id = params_conf && params_conf.dest;
        ifr = id && _elt(id);
        par = ifr && _elt(POS_REL_BOX_ID_PREFIX + "_" + posID);
        ifrSt = ifr && ifr[ST];
        parSt = par && par[ST];
        scr_handle = void 0;
        if (sf && sf.info && sf.info.errs) {
          sf.info.errs.push(msgObj);
        }
        _fire_pub_callback(POS_MSG, posID, ERROR_COMMAND, msgObj);
      };

      /*
      Returns the current document cookies as a hash
      @name $sf.lib._cookieHash
      @private
      @static
      @function
      @returns {Object}
       */
      _cookieHash = function() {
        var c, cookies, cooks, i, key;
        cooks = void 0;
        key = void 0;
        i = void 0;
        cookies = {};
        c = void 0;
        cooks = document.cookie.split("; ");
        i = cooks.length - 1;
        while (i >= 0) {
          c = cooks[i].split("=");
          cookies[c[0]] = c[1];
          i--;
        }
        return cookies;
      };

      /*
      Read a host domain cookie
      
      @name $sf.host-_read_cookie
      @private
      @static
      @function
      @param {$sf.lib.lang.ParamHash} msgObj The details about the message send from the SafeFrame
      @param {Boolean} [isOutside] Whether or not the read-cookie command came from the publisher
       */
      _read_cookie = function(msgObj, isOutside) {
        var canRead, command, cookies, id, ifr, key, params, params_conf, posID;
        posID = msgObj && msgObj.pos;
        params = posID && rendered_ifrs[posID];
        params_conf = params && params.conf;
        id = params_conf && params_conf.dest;
        ifr = id && _elt(id);
        key = void 0;
        cookies = void 0;
        command = "read-cookie";
        canRead = params_conf.supports && params_conf.supports[command] && params_conf.supports[command] !== "0";
        if (!canRead) {
          return;
        }
        if (!posID || !params || !ifr) {
          return;
        }
        key = msgObj.cookie;
        if (!key) {
          return;
        }
        cookies = _cookieHash();
        _fire_pub_callback(POS_MSG, command, posID, 0, 0);
        msgObj.cmd = command;
        msgObj.geom = _es(_getGeom(posID, true));
        msgObj.value = cookies[key];
        _send_response(params, msgObj);
        ifr = params = msgObj = null;
      };

      /*
      Write a host domain cookie
      
      @name $sf.host-_write_cookie
      @private
      @static
      @function
      @param {$sf.lib.lang.ParamHash} msgObj The details about the message send from the SafeFrame
      @param {Boolean} [isOutside] Whether or not the write-cookie command came from the publisher
       */
      _write_cookie = function(msgObj, isOutside) {
        var c_value, canRead, command, cookies, exdate, id, ifr, key, newCookies, newValue, params, params_conf, posID;
        posID = msgObj && msgObj.pos;
        params = posID && rendered_ifrs[posID];
        params_conf = params && params.conf;
        id = params_conf && params_conf.dest;
        ifr = id && _elt(id);
        key = void 0;
        newValue = void 0;
        cookies = void 0;
        newCookies = void 0;
        command = "write-cookie";
        canRead = params_conf.supports && params_conf.supports[command] && params_conf.supports[command] !== "0";
        if (!canRead) {
          return;
        }
        if (!posID || !params || !ifr) {
          return;
        }
        key = msgObj.cookie;
        if (!key) {
          return;
        }
        newValue = escape(msgObj.value);
        if (msgObj.expires) {
          exdate = new Date(_cnum(msgObj.expires));
        } else {
          exdate = new Date();
          exdate.setDate(exdate.getDate() + 1);
        }
        c_value = newValue + "; path=/; expires=" + exdate.toUTCString();
        document.cookie = key + "=" + c_value;
        _fire_pub_callback(POS_MSG, command, posID, 0, 0);
        msgObj.cmd = command;
        msgObj.geom = _es(_getGeom(posID, true));
        msgObj.info = newValue;
        msgObj.value = "";
        _send_response(params, msgObj);
        ifr = params = msgObj = null;
      };

      /*
      Remove / destroy one or more SafeFrames from the publisher page
      
      @name $sf.host.nuke
      @static
      @function
      @public
      @param {String} pos_id* One or more position ids to remove from the page. If no arguments are specifed, all positions currently rendered are removed.
       */
      nuke = function() {
        var args, el, el_id, empty, idx, par, pos, pos_id, sb_rel;
        idx = 0;
        empty = true;
        args = arguments;
        pos_id = void 0;
        pos = void 0;
        el_id = void 0;
        el = void 0;
        sb_rel = void 0;
        par = void 0;
        if (!args[LEN] || args[idx] === "*") {
          args = [];
          for (pos_id in rendered_ifrs) {
            args.push(pos_id);
          }
        }
        while (pos_id = args[idx++]) {
          pos = rendered_ifrs[pos_id];
          if (pos) {
            if (pos_id in pending_ifrs) {
              clearTimeout(pending_ifrs[pos_id]);
              delete pending_ifrs[pos_id];
            }
            if (pos_id in complete_ifrs) {
              delete complete_ifrs[pos_id];
            }
            el_id = pos.dest;
            el = el_id && _elt(el_id);
            par = el && _par(el);
            if (dom.attr(par, "id").indexOf(POS_REL_BOX_ID_PREFIX) !== -1) {
              sb_rel = par;
              par = _par(sb_rel);
            }
            dom.purge(el);
            if (sb_rel) {
              dom.purge(sb_rel);
            }
            rendered_ifrs[pos_id] = null;
            delete rendered_ifrs[pos_id];
            el = dom.make("div");
            dom.attr(el, "id", el_id);
            dom.append(par, el);
          }
        }
        pos_id = "";
        for (pos_id in rendered_ifrs) {
          empty = false;
          break;
        }
        if (empty) {
          current_status = "";
          _handle_unload();
        }
      };

      /*
      Render one or more $sf.host.Position objects into the page
      
      @name $sf.host.render
      @public
      @static
      @function
      @param {$sf.host.Position} pos* An instance of an $sf.host.Position object to render. Note that said object must have a corresponding $sf.host.PosConfig, as well as $sf.host.Config must have been set
       */
      render = function(positions, waitForDom) {
        var args, css_txt, dest_el, dest_id, dest_rel_id, e, finalCSSEnd, finalCSSPos, firstCSSPos, h, idx, name_params, new_dest_el, par_el, pend, pos, pos_conf, pos_id, rel_el, st, view_elem, w;
        idx = 0;
        args = arguments;
        firstCSSPos = "relative";
        finalCSSPos = "absolute";
        finalCSSEnd = "top:0px;left:0px;visibility:hidden;display:none;";
        pos = void 0;
        pos_id = void 0;
        pos_conf = void 0;
        dest_el = void 0;
        new_dest_el = void 0;
        rel_el = void 0;
        par_el = void 0;
        name_params = void 0;
        dest_id = void 0;
        dest_rel_id = void 0;
        css_txt = void 0;
        w = void 0;
        h = void 0;
        st = void 0;
        e = void 0;
        pend = void 0;
        if (!config) {
          return false;
        }
        if (!dom.ready() && waitForDom) {
          dom.wait(function() {
            render.apply(null, args);
            args = null;
          });
          return null;
        }
        if (!(positions instanceof Array)) {
          positions = [positions];
        }
        while (pos = positions[idx++]) {
          pos_id = pos.id;
          pos_conf = (pos_id ? config.positions[pos_id] : null);
          if (pos_conf) {
            dest_id = pos_conf.dest;
            dest_el = dest_id && _elt(dest_id);
            if (pos_conf.view_id) {
              view_elem = _elt(pos_conf.view_id);
            }
            if (dest_el) {
              w = pos_conf.w;
              h = pos_conf.h;
              if (!w) {
                try {
                  w = dest_el.offsetWidth;
                } catch (_error) {
                  e = _error;
                  w = 0;
                }
                if (w) {
                  pos_conf.w = w;
                }
              }
              if (!h) {
                try {
                  h = dest_el.offsetHeight;
                } catch (_error) {
                  e = _error;
                  h = 0;
                }
                if (h) {
                  pos_conf.h = h;
                }
              }
              if (w && h) {
                name_params = new ParamHash();
                dest_rel_id = POS_REL_BOX_ID_PREFIX + "_" + pos_id;
                rel_el = _elt(dest_rel_id);
                par_el = _par(dest_el);
                if (rel_el && par_el === rel_el) {
                  par_el = _par(rel_el);
                }
                _shim_frame(dest_id);

                /*
                @ignore
                 */
                pend = pending_ifrs[pos_id];
                if (pend) {
                  clearTimeout(pend);
                }
                pend = complete_ifrs[pos_id];
                if (pend) {
                  delete complete_ifrs[pos_id];
                }
                pending_ifrs[pos_id] = setTimeout(function() {
                  _handle_render_timeout(pos_id);
                }, config.to);
                current_status = "rendering";
                _fire_pub_callback("onStartPosRender", pos_id, pos_conf, pos);
                css_txt = ["position:", "", ";z-index:0;", WIDTH, ":", w, PX, ";", HEIGHT, ":", h, PX, ";", "visibility:inherit;"];
                if (!rel_el) {
                  css_txt[1] = firstCSSPos;
                  rel_el = dom.make("div");
                  rel_el.id = dest_rel_id;
                  rel_el.className = "iab_sf";
                  new_dest_el = dest_el.cloneNode(false);
                  dom.css(new_dest_el, css_txt);
                  rel_el.appendChild(new_dest_el);
                  dom.css(rel_el, css_txt);
                  par_el.replaceChild(rel_el, dest_el);
                  dest_el = _elt(dest_id);
                } else {
                  st = rel_el[ST];
                  st.width = w + PX;
                  st.height = h + PX;
                  st = dest_el && dest_el[ST];
                  st.width = w + PX;
                  st.height = h + PX;
                }
                name_params.id = pos_id;
                name_params.dest = dest_id;
                name_params.conf = ParamHash(pos_conf);
                name_params.meta = pos.meta.toString();
                name_params.html = _es(pos.html);
                name_params.geom = _es(_build_geom(pos_id, view_elem || dest_el));
                name_params.src = pos_conf.renderFile || config.renderFile;
                name_params.has_focus = lang.cstr(document.hasFocus());
                css_txt[1] = finalCSSPos;
                css_txt[13] = finalCSSEnd;
                if (!win_events_attached) {
                  dom.attach(win, SCROLL, _handle_win_geom_scroll);
                  dom.attach(win, "resize", _handle_win_geom_resize);
                  dom.attach(win, "unload", _handle_unload);
                  dom.attach(win, "focus", _handle_win_focus);
                  dom.attach(win, "blur", _handle_win_blur);
                  win_events_attached = true;
                }
                iframes.replace({
                  id: dest_id,
                  name: name_params,
                  src: pos_conf.renderFile || config.renderFile,
                  _pos_id: pos_id
                }, css_txt, rel_el, _handle_frame_load, _handle_msg_evt);
                rendered_ifrs[pos_id] = name_params;
              }
            }
          }
        }
      };

      /*
      Gets a copy of the Position configuration, content, and meta data for a given SafeFrame
      
      @name $sf.host.get
      @public
      @function
      @static
      @return {Object}
       */
      get = function(positionId) {
        var obj;
        obj = rendered_ifrs[positionId];
        if (!obj) {
          return null;
        }
        return _mix({}, obj);
      };

      /*
      Returns a string as to whether or not the library is busy, empty string is returned on idle
      
      @name $sf.host.status
      @public
      @function
      @static
      @return {String}
       */
      status = function() {
        return current_status;
      };
      _send_generic_response = function(posID, command) {
        var msgObj, params;
        msgObj = new ParamHash();
        params = posID && rendered_ifrs[posID];
        msgObj.cmd = command;
        msgObj.pos = posID;
        return _send_response(params, msgObj);
      };
      _getGeom = function(posID, dom_attach_scroll_evt) {
        var g, id, ifr, params, posConf, view_elem;
        if (dom_attach_scroll_evt == null) {
          dom_attach_scroll_evt = true;
        }
        params = rendered_ifrs[posID];
        posConf = config.positions[posID];
        id = params && params.dest;
        ifr = id && _elt(id);
        if (posConf != null ? posConf.view_id : void 0) {
          view_elem = _elt(posConf != null ? posConf.view_id : void 0);
        }
        g = _build_geom(posID, view_elem || ifr, dom_attach_scroll_evt);
        return g;
      };
      inViewPercentage = function(posID) {
        var geom_info, iv, tv, _ref;
        geom_info = _getGeom(posID);
        iv = _cnum(geom_info != null ? (_ref = geom_info.self) != null ? _ref.iv : void 0 : void 0, -1, 0);
        if (iv >= 0) {
          tv = Math.floor(iv * 100);
        }
        return tv;
      };
      if (lang) {
        if (win === top || allowNotTop) {
          _rect = (ieVer ? _getRectIE : _getRectNonIE);
          _mix(dom, {
            rect: _rect,
            currentStyle: currentStyle,
            contains: contains,
            docRect: docRect,
            winRect: winRect,
            bounds: bounds,
            overlaps: overlaps
          });

          /*
          @ignore
           */
          (function() {
            var e, k, v, _ref;
            e = void 0;
            dom.msghost = {
              prep: prep_iframe_msging,
              attach: attach_iframe_msging,
              detach: detach_iframe_msging,
              usingHTML5: usingHTML5,
              send: send_msg_to_child_iframe
            };
            _ref = dom.msghost;
            for (k in _ref) {
              v = _ref[k];
              dom.msghost[k] = lang.wrap(v, function(f) {
                var args;
                if (!(win === top || allowNotTop)) {
                  return;
                }
                args = Array.prototype.slice.call(arguments, 1, arguments.length);
                return f.apply(this, args);
              });
            }
            dom[ATTACH](win, MSG, _check_html5_init);
            initID = "xdm-html5-init-" + _guid();
            locHost = (locHost.indexOf("file") === 0 ? locHost = "file" : locHost);
            try {
              win[PMSG](initID, (locHost === "file" ? "*" : locHost));
            } catch (_error) {
              e = _error;
              dom[DETACH](win, MSG, _check_html5_init);
            }
          })();
          _mix(sf.host, {
            Config: Config,
            PosConfig: PosConfig,
            PosMeta: PosMeta,
            Position: Position,
            nuke: nuke,
            get: get,
            render: render,
            status: status,
            inViewPercentage: inViewPercentage
          });
        }
      }
      if (allowNotTop) {
        window["$sf"] = sf;
      }
      return sf;
    })(window, sf);
  };

}).call(this);
